{"version":3,"sources":["SmashBall.svg","components/Header.js","components/Footer.js","components/Jumbotron.js","components/imageCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","style","backgroundColor","top","margin","phrase","id","score","topscore","Footer","src","logo","width","height","float","alt","Jumbotron","Images","imgURL","name","border","lostGame","onClick","imageClick","characterIndex","App","shuffleCards","arr","i","length","j","Math","floor","random","resetData","state","characters","map","isClicked","setState","truePhrase","headerPhrases","isLost","newShuffledCards","tempCharacters","clickedCards","cardsTotal","this","char","key","image","smashBall","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8476ece.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SmashBall.f0790b04.svg\";","import React from 'react';\n\nconst Header = props => {\n\n  const navStyle = {\n    backgroundColor: 'lightgray',\n    top: '0',\n    margin: '0 auto'\n  }\n\n    return <nav className=\"navbar navbar-default\" style={navStyle}>\n        <ul className=\"navbar\">\n          <li className=\"navbar\">Smash Clicky Game!</li>\n          <li className=\"navbar\"><b>{props.phrase}</b></li>\n          <li className=\"navbar\">Score: <span id=\"score\">{props.score}</span> | Top Score: <span id=\"topscore\">{props.topscore}</span></li>\n        </ul>\n      </nav>\n}\n\nexport default Header;","import React from 'react';\n\nconst Footer = props => {\n    let logoStyle= {\n      width: '45px',\n      height: 'auto',\n      float: 'left',\n      margin: '5px 5px 5px 5px'\n    }\n    let footerStyle = {\n      margin: '75px 0 0 0',\n      backgroundColor: 'lightgray',\n    }\n    return (\n      <footer className=\"page-footer navbar-fixed-bottom\" style={footerStyle}>\n        <img src={props.logo} style={logoStyle} alt=\"logo\"></img><h4>Smash Clicker!</h4>\n      </footer>\n    );\n  }\n\nexport default Footer;","import React from 'react';\n\nfunction Jumbotron (){\n    return <div className=\"jumbotron \">\n        <h2>Smash Clicky Game!</h2>\n        <h4>Click on the images to increase your score, but don't click on any of them twice!</h4>\n    </div>\n};\n\nexport default Jumbotron;","import React from 'react';\n//import characters from '../cardlist.json';\n\n// display images\nconst Images = props => {\n    // store image and div styling in an object for easy JSX reference\n    const divStyle = {\n        width: '20%',\n        height: '20%',\n        float: 'left',\n        margin: '0 5px 5px 0'\n    }\n    const imgStyle = {\n        width: '100%',\n        height: '100%',\n        border: '1px solid gray'\n    }\n          \n    \n\n    return (<div className=\"image\" style={divStyle}>\n            <img src={props.imgURL} alt={props.name} style={imgStyle} className={`image ${props.lostGame ? 'image-shake' : ''}`}onClick={ () => {props.imageClick(props.characterIndex)} } ></img>\n            </div>)\n    }\n\n\nexport default Images;","import React from 'react';\nimport smashBall from './SmashBall.svg';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Jumbotron from './components/Jumbotron';\nimport Images from './components/imageCard';\nimport characters from './cardlist.json';\nimport './App.css';\n\n// create App as a class to make it more updateable\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n  // setting state\n  // moved variables into a state object for updating\n    this.state = {\n      score: 0,\n      topscore: 0,\n      clickedCards: [],\n      cardsTotal: 12,\n      headerPhrases: ['Click to start the game!', 'Good guess, keep going!', 'Wrong guess. Start over!'],\n      truePhrase: 'Click to start!',\n      isLost: false,\n      characters\n    }\n  }\n  // card shuffling function\n  shuffleCards = arr =>{\n    for (let i=0; i < arr.length; i++) {\n      let j = Math.floor(Math.random()*(i+1));\n      [arr[i], arr[j]] = [arr[j],arr[i]];\n    }\n\n    return arr; // calvins note we have to return the shuffled array\n  }\n  // function to reset the isClicked value in each part of the array\n  resetData = () => {\n    this.state.characters.map((characters)=>{\n      characters.isClicked=false;\n      return characters;\n    })\n    //this.setState({isLost: false})\n  }\n\n  // if a card is in the clickedCards array, clicking it will trigger the headerPhrases[2] to display etc.\n\n  // function for image click event / score tally functionality\n  imageClick = (characterIndex) => {\n    // check if the image is clicked\n    if (this.state.characters[characterIndex].isClicked === true) {\n      // display the loss header phrase\n      this.setState({truePhrase: this.state.headerPhrases[2]});\n      // if they got a new high score, swap out old top for new score\n      if (this.state.score > this.state.topscore) {\n        this.setState({topscore: this.state.score});\n      }\n      // reseting score to 0\n      this.setState({score: 0})\n      // set lostGame to true to trigger shake animation\n      this.setState({isLost: true})\n      // run shuffle function\n      let newShuffledCards = this.shuffleCards(this.state.characters);\n      // update the state characters array with the  newly shuffled cards\n      this.setState( {characters: [...newShuffledCards]});\n      // reset the isClicked in a set interval to assure the shake animation happens\n      this.resetData();\n    } else {\n        this.setState({isLost: false});\n        // temporary variable to store array\n        let tempCharacters = [...this.state.characters];\n        // set the isClicked value to true\n        tempCharacters[characterIndex].isClicked = true;\n        this.setState({characters: [...tempCharacters] });\n        // shuffle the cards\n        let newShuffledCards = this.shuffleCards(tempCharacters);\n        this.setState( {characters: [...newShuffledCards]});\n        // increase score by 1\n        this.setState((state)=> ({score: state.score += 1}));\n        // display the good guess phrase\n        this.setState({truePhrase: this.state.headerPhrases[1]});\n    }\n   }\n\n   render() {\n    return (\n      // render components in html\n      <div className=\"App\">\n        <Header phrase={this.state.truePhrase} score={this.state.score} topscore={this.state.topscore} />\n        <Jumbotron />\n        <div className=\"container\">\n        {\n          this.state.characters.map( (char, characterIndex) => (\n            <Images lostGame={this.state.isLost} key={char.id} imgURL={char.image} name={char.name} imageClick={this.imageClick} characterIndex={characterIndex} />\n          ))\n        }\n       </div>\n      <Footer logo={smashBall} />\n      </div>\n    );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}